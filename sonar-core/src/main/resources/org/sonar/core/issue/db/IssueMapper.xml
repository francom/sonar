<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mappei.dtd">

<mapper namespace="org.sonar.core.issue.db.IssueMapper">

  <sql id="issueColumns">
    i.id,
    i.kee as kee,
    i.component_id as componentId,
    i.root_component_id as rootComponentId,
    i.rule_id as ruleId,
    i.action_plan_key as actionPlanKey,
    i.severity as severity,
    i.manual_severity as manualSeverity,
    i.message as message,
    i.line as line,
    i.effort_to_fix as effortToFix,
    i.technical_debt as debt,
    i.status as status,
    i.resolution as resolution,
    i.checksum as checksum,
    i.reporter as reporter,
    i.assignee as assignee,
    i.author_login as authorLogin,
    i.issue_attributes as issueAttributes,
    i.issue_creation_date as issueCreationDate,
    i.issue_update_date as issueUpdateDate,
    i.issue_close_date as issueCloseDate,
    i.created_at as createdAt,
    i.updated_at as updatedAt,
    r.plugin_rule_key as ruleKey,
    r.plugin_name as ruleRepo,
    p.kee as componentKey,
    root.kee as rootComponentKey
  </sql>

  <sql id="sortColumn">
    <if test="query.sort() != null">,
      <choose>
        <when test="'SEVERITY'.equals(query.sort())">
          i.severity as severity
        </when>
        <when test="'STATUS'.equals(query.sort())">
          i.status as status
        </when>
        <when test="'ASSIGNEE'.equals(query.sort())">
          i.assignee as assignee
        </when>
        <when test="'CREATION_DATE'.equals(query.sort())">
          i.issue_creation_date as issueCreationDate
        </when>
        <when test="'UPDATE_DATE'.equals(query.sort())">
          i.issue_update_date as issueUpdateDate
        </when>
        <when test="'CLOSE_DATE'.equals(query.sort())">
          i.issue_close_date as issueCloseDate
        </when>
      </choose>
    </if>
  </sql>

  <insert id="insert" parameterType="Issue" useGeneratedKeys="false" keyProperty="id">
    INSERT INTO issues (kee, component_id, root_component_id, rule_id, action_plan_key, severity, manual_severity,
    message, line, effort_to_fix, technical_debt, status,
    resolution, checksum, reporter, assignee, author_login, issue_attributes, issue_creation_date, issue_update_date,
    issue_close_date, created_at, updated_at)
    VALUES (#{kee}, #{componentId}, #{rootComponentId}, #{ruleId}, #{actionPlanKey}, #{severity}, #{manualSeverity},
    #{message}, #{line}, #{effortToFix}, #{debt}, #{status},
    #{resolution}, #{checksum}, #{reporter}, #{assignee}, #{authorLogin}, #{issueAttributes}, #{issueCreationDate},
    #{issueUpdateDate}, #{issueCloseDate}, #{createdAt}, #{updatedAt})
  </insert>

  <!--
    IMPORTANT - invariant columns can't be updated. See IssueDto#toDtoForUpdate()
  -->
  <update id="update" parameterType="Issue">
    update issues set
    action_plan_key=#{actionPlanKey},
    severity=#{severity},
    manual_severity=#{manualSeverity},
    message=#{message},
    line=#{line},
    effort_to_fix=#{effortToFix},
    technical_debt=#{debt},
    status=#{status},
    resolution=#{resolution},
    checksum=#{checksum},
    reporter=#{reporter},
    assignee=#{assignee},
    author_login=#{authorLogin},
    issue_attributes=#{issueAttributes},
    issue_creation_date=#{issueCreationDate},
    issue_update_date=#{issueUpdateDate},
    issue_close_date=#{issueCloseDate},
    updated_at=#{updatedAt}
    where kee = #{kee}
  </update>

  <!--
   IMPORTANT - invariant columns can't be updated. See IssueDto#toDtoForUpdate()
 -->
  <update id="updateIfBeforeSelectedDate" parameterType="Issue">
    update issues set
    action_plan_key=#{actionPlanKey},
    severity=#{severity},
    manual_severity=#{manualSeverity},
    message=#{message},
    line=#{line},
    effort_to_fix=#{effortToFix},
    technical_debt=#{debt},
    status=#{status},
    resolution=#{resolution},
    checksum=#{checksum},
    reporter=#{reporter},
    assignee=#{assignee},
    author_login=#{authorLogin},
    issue_attributes=#{issueAttributes},
    issue_creation_date=#{issueCreationDate},
    issue_update_date=#{issueUpdateDate},
    issue_close_date=#{issueCloseDate},
    updated_at=#{updatedAt}
    where kee = #{kee} and updated_at &lt;= #{selectedAt}
  </update>

  <select id="selectByKey" parameterType="String" resultType="Issue">
    select
    <include refid="issueColumns"/>
    from issues i
    inner join rules r on r.id=i.rule_id
    inner join projects p on p.id=i.component_id
    inner join projects root on root.id=i.root_component_id
    <where>
      and i.kee=#{kee}
    </where>
  </select>

  <select id="selectNonClosedIssuesByModule" parameterType="int" resultType="Issue">
    select
      i.id,
      i.kee as kee,
      i.component_id as componentId,
      i.root_component_id as rootComponentId,
      i.rule_id as ruleId,
      i.action_plan_key as actionPlanKey,
      i.severity as severity,
      i.manual_severity as manualSeverity,
      i.message as message,
      i.line as line,
      i.effort_to_fix as effortToFix,
      i.technical_debt as debt,
      i.status as status,
      i.resolution as resolution,
      i.checksum as checksum,
      i.reporter as reporter,
      i.assignee as assignee,
      i.author_login as authorLogin,
      i.issue_attributes as issueAttributes,
      i.issue_creation_date as issueCreationDate,
      i.issue_update_date as issueUpdateDate,
      i.issue_close_date as issueCloseDate,
      i.created_at as createdAt,
      i.updated_at as updatedAt,
      r.plugin_rule_key as ruleKey,
      r.plugin_name as ruleRepo,
      p.kee as componentKey
    from issues i
    inner join rules r on r.id=i.rule_id
    inner join (select p.id,p.kee from projects p where (p.root_id=#{id} and p.qualifier &lt;&gt; 'BRC') or (p.id=#{id})) p on p.id=i.component_id
    <where>
      and i.status &lt;&gt; 'CLOSED'
    </where>
  </select>

  <select id="selectByIds" parameterType="map" resultType="Issue">
    select
    <include refid="issueColumns"/>
    from issues i
    inner join rules r on r.id=i.rule_id
    inner join projects p on p.id=i.component_id
    inner join projects root on root.id=i.root_component_id
    <where>
      and i.id in
      <foreach collection="list" open="(" close=")" item="id" separator=",">
        #{id}
      </foreach>
    </where>
  </select>

  <select id="selectIssues" parameterType="map" resultType="Issue">
    select <include refid="issueColumns"/>
    from issues i
    inner join rules r on r.id=i.rule_id
    inner join projects p on p.id=i.component_id
    inner join projects root on root.id=i.root_component_id
    <include refid="selectQueryConditions"/>
  </select>

  <select id="selectIssueIds" parameterType="map" resultType="Issue">
    select i.id <include refid="sortColumn"/>
    from issues i
    <include refid="selectQueryConditions"/>
    limit #{maxResults}
  </select>

  <!-- SQL Server -->
  <select id="selectIssueIds" parameterType="map" resultType="Issue" databaseId="mssql">
    select top (#{maxResults}) i.id <include refid="sortColumn"/>
    from issues i
    <include refid="selectQueryConditions"/>
  </select>

  <!-- Oracle -->
  <select id="selectIssueIds" parameterType="map" resultType="Issue" databaseId="oracle">
    select * from (select
      i.id <include refid="sortColumn"/>
      from issues i
      <include refid="selectQueryConditions"/>
    )
    where rownum &lt;= #{maxResults}
  </select>

  <sql id="selectQueryConditions">
    <if test="componentRootKeys.size() == 0 and role != null">
      inner join projects root_project on root_project.id=i.root_component_id and root_project.enabled=${_true}
      inner join (<include refid="org.sonar.core.user.AuthorizationMapper.selectAuthorizedRootProjectsKeysQuery" />) authorizedProjects on authorizedProjects.root_project_kee=root_project.kee
    </if>
    <if test="componentRootKeys.size() > 0">
      inner join (<include refid="org.sonar.core.resource.ResourceMapper.selectAuthorizedChildrenComponentIdsQuery" />) authorizedComponents on authorizedComponents.project_id=i.component_id
    </if>
    <if test="query.components().size() > 0">
      inner join projects project_component on project_component.id=i.component_id and project_component.enabled=${_true} and
      <foreach item="component" index="index" collection="query.components()" open="(" separator=" or " close=")">project_component.kee=#{component}
      </foreach>
    </if>
    <if test="query.rules().size()>0">
      inner join rules r on r.id=i.rule_id and (<foreach item="rule" index="index" collection="query.rules()" open="(" separator=" or " close=")">
      r.plugin_name=#{rule.repository} and r.plugin_rule_key=#{rule.rule}</foreach>)
    </if>
    <where>
      <if test="query.issueKeys().size()>0">
        and <foreach item="key" index="index" collection="query.issueKeys()" open="(" separator=" or " close=")">i.kee=#{key}
        </foreach>
      </if>
      <if test="query.severities().size()>0">
        and <foreach item="severity" index="index" collection="query.severities()" open="(" separator=" or " close=")">i.severity=#{severity}
        </foreach>
      </if>
      <if test="query.statuses().size()>0">
        and <foreach item="status" index="index" collection="query.statuses()" open="(" separator=" or " close=")">i.status=#{status}
        </foreach>
      </if>
      <if test="query.resolutions().size()>0">
        and <foreach item="resolution" index="index" collection="query.resolutions()" open="(" separator=" or " close=")">i.resolution=#{resolution}
        </foreach>
      </if>
      <if test="query.resolved() != null">
        <if test="query.resolved() == true">
          and i.resolution is not null
        </if>
        <if test="query.resolved() == false">
          and i.resolution is null
        </if>
      </if>
      <if test="query.reporters().size()>0">
        and <foreach item="reporter" index="index" collection="query.reporters()" open="(" separator=" or " close=")">i.reporter=#{reporter}
        </foreach>
      </if>
      <if test="query.assignees().size()>0">
        and <foreach item="assignee" index="index" collection="query.assignees()" open="(" separator=" or " close=")">i.assignee=#{assignee}
        </foreach>
      </if>
      <if test="query.assigned() != null">
        <if test="query.assigned() == true">
          and i.assignee is not null
        </if>
        <if test="query.assigned() == false">
          and i.assignee is null
        </if>
      </if>
      <if test="query.planned() != null">
        <if test="query.planned() == true">
          and i.action_plan_key is not null
        </if>
        <if test="query.planned() == false">
          and i.action_plan_key is null
        </if>
      </if>
      <if test="query.actionPlans().size()>0">
        and
        <foreach item="action_plan" index="index" collection="query.actionPlans()" open="(" separator=" or " close=")">
          i.action_plan_key=#{action_plan}
        </foreach>
      </if>
      <if test="query.createdAfter() != null">
        and i.issue_creation_date &gt; #{query.createdAfter}
      </if>
      <if test="query.createdAt() != null">
        and i.issue_creation_date = #{query.createdAt}
      </if>
      <if test="query.createdBefore() != null">
        and i.issue_creation_date &lt; #{query.createdBefore}
      </if>
    </where>
  </sql>

</mapper>

